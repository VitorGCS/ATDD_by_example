<?xml version="1.0"?>
<testResults>
  <FitNesseVersion>v20221219</FitNesseVersion>
  <rootPath>TrafficLights.Traffic_light_states.CrossingControl.TwoCarCrossings</rootPath>
  <result>
    <counts>
      <right>0</right>
      <wrong>0</wrong>
      <ignores>0</ignores>
      <exceptions>4</exceptions>
    </counts>
    <date>2023-02-15T16:35:36Z</date>
    <runTimeInMillis>70</runTimeInMillis>
    <content>&lt;div class="collapsible closed"&gt;&lt;ul&gt;&lt;li&gt;&lt;a href='#' class='expandall'&gt;Expand&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href='#' class='collapseall'&gt;Collapse&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;
	&lt;p class="title"&gt;Included page: &lt;a href="TrafficLights.SetUp"&gt;.TrafficLights.SetUp&lt;/a&gt; &lt;a href="TrafficLights.SetUp?edit&amp;amp;redirectToReferer=true&amp;amp;redirectAction=" class="edit"&gt;(edit)&lt;/a&gt;&lt;/p&gt;
	&lt;div&gt;This set up page is executed once, before any tests in this suite.&lt;br/&gt;An &lt;a href="FitNesse.UserGuide.WritingAcceptanceTests.SliM.ImportTable"&gt;import table&lt;/a&gt; defines which Java packages may contain fixture classes.&lt;br/&gt;&lt;br/&gt;&lt;table&gt;
	&lt;tr class="slimRowTitle"&gt;
		&lt;td&gt;import&lt;/td&gt;
	&lt;/tr&gt;
	&lt;tr class="slimRowColor0"&gt;
		&lt;td&gt;&lt;span class="pass"&gt;org.trafficlights.test.acceptance&lt;/span&gt;&lt;/td&gt;
	&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;br/&gt;&lt;table&gt;
	&lt;tr class="slimRowTitle"&gt;
		&lt;td&gt;import&lt;/td&gt;
	&lt;/tr&gt;
	&lt;tr class="slimRowColor0"&gt;
		&lt;td&gt;&lt;span class="pass"&gt;org.trafficlights.test.acceptance&lt;/span&gt;&lt;/td&gt;
	&lt;/tr&gt;
&lt;/table&gt;
&lt;br/&gt;&lt;table&gt;
	&lt;tr class="slimRowTitle"&gt;
		&lt;td colspan="4"&gt;&lt;span class="pass"&gt;FirstLightSwitchingCrossingController&lt;/span&gt;&lt;/td&gt;
	&lt;/tr&gt;
	&lt;tr class="slimRowTitle"&gt;
		&lt;td&gt;first light&lt;/td&gt;
		&lt;td&gt;second light&lt;/td&gt;
		&lt;td&gt;first light?&lt;/td&gt;
		&lt;td&gt;second light?&lt;/td&gt;
	&lt;/tr&gt;
	&lt;tr class="slimRowColor1"&gt;
		&lt;td&gt;green &lt;span class="error"&gt;No Method setFirstLight[1] in class org.trafficlights.test.acceptance.FirstLightSwitchingCrossingController.
 Available methods:
equals(java.lang.Object) -&amp;gt; boolean
getClass() -&amp;gt; class java.lang.Class
hashCode() -&amp;gt; int
notify() -&amp;gt; void
notifyAll() -&amp;gt; void
toString() -&amp;gt; class java.lang.String
wait() -&amp;gt; void
wait(long) -&amp;gt; void
wait(long, int) -&amp;gt; void&lt;/span&gt;&lt;/td&gt;
		&lt;td&gt;red &lt;span class="error"&gt;No Method setSecondLight[1] in class org.trafficlights.test.acceptance.FirstLightSwitchingCrossingController.
 Available methods:
equals(java.lang.Object) -&amp;gt; boolean
getClass() -&amp;gt; class java.lang.Class
hashCode() -&amp;gt; int
notify() -&amp;gt; void
notifyAll() -&amp;gt; void
toString() -&amp;gt; class java.lang.String
wait() -&amp;gt; void
wait(long) -&amp;gt; void
wait(long, int) -&amp;gt; void&lt;/span&gt;&lt;/td&gt;
		&lt;td&gt;yellow &lt;span class="error"&gt;No Method firstLight[0] in class org.trafficlights.test.acceptance.FirstLightSwitchingCrossingController.
 Available methods:
equals(java.lang.Object) -&amp;gt; boolean
getClass() -&amp;gt; class java.lang.Class
hashCode() -&amp;gt; int
notify() -&amp;gt; void
notifyAll() -&amp;gt; void
toString() -&amp;gt; class java.lang.String
wait() -&amp;gt; void
wait(long) -&amp;gt; void
wait(long, int) -&amp;gt; void&lt;/span&gt;&lt;/td&gt;
		&lt;td&gt;red &lt;span class="error"&gt;No Method secondLight[0] in class org.trafficlights.test.acceptance.FirstLightSwitchingCrossingController.
 Available methods:
equals(java.lang.Object) -&amp;gt; boolean
getClass() -&amp;gt; class java.lang.Class
hashCode() -&amp;gt; int
notify() -&amp;gt; void
notifyAll() -&amp;gt; void
toString() -&amp;gt; class java.lang.String
wait() -&amp;gt; void
wait(long) -&amp;gt; void
wait(long, int) -&amp;gt; void&lt;/span&gt;&lt;/td&gt;
	&lt;/tr&gt;
&lt;/table&gt;
&lt;br/&gt;&lt;br/&gt;&lt;span class="meta"&gt;variable defined: TEST_SYSTEM=slim&lt;/span&gt;
&lt;br/&gt;&lt;span class="meta"&gt;classpath: target/classes&lt;/span&gt;&lt;br/&gt;&lt;span class="meta"&gt;classpath: target/test-classes&lt;/span&gt;&lt;br/&gt;</content>
    <relativePageName>TwoCarCrossings</relativePageName>
    <instructions>
      <instructionResult>
        <instruction>{id='import_0_0', instruction='import', path='org.trafficlights.test.acceptance'}</instruction>
        <slimResult>pass(org.trafficlights.test.acceptance)</slimResult>
        <expectation>
          <status>pass</status>
          <instructionId>import_0_0</instructionId>
          <col>0</col>
          <row>1</row>
          <type>ImportExpectation</type>
          <evaluationMessage>org.trafficlights.test.acceptance</evaluationMessage>
        </expectation>
      </instructionResult>
      <instructionResult>
        <instruction>{id='import_1_0', instruction='import', path='org.trafficlights.test.acceptance'}</instruction>
        <slimResult>pass(org.trafficlights.test.acceptance)</slimResult>
        <expectation>
          <status>pass</status>
          <instructionId>import_1_0</instructionId>
          <col>0</col>
          <row>1</row>
          <type>ImportExpectation</type>
          <evaluationMessage>org.trafficlights.test.acceptance</evaluationMessage>
        </expectation>
      </instructionResult>
      <instructionResult>
        <instruction>{id='decisionTable_2_0', instruction='make', instanceName='decisionTable_2', className='FirstLightSwitchingCrossingController', args=[]}</instruction>
        <slimResult>pass(FirstLightSwitchingCrossingController)</slimResult>
        <expectation>
          <status>pass</status>
          <instructionId>decisionTable_2_0</instructionId>
          <col>0</col>
          <row>0</row>
          <type>ConstructionExpectation</type>
          <evaluationMessage>FirstLightSwitchingCrossingController</evaluationMessage>
        </expectation>
      </instructionResult>
      <instructionResult>
        <instruction>{id='decisionTable_2_4', instruction='call', instanceName='decisionTable_2', methodName='setFirstLight', args=[green]}</instruction>
        <slimResult></slimResult>
        <expectation>
          <status>error</status>
          <instructionId>decisionTable_2_4</instructionId>
          <type>VoidReturnExpectation</type>
          <evaluationMessage>No Method setFirstLight[1] in class org.trafficlights.test.acceptance.FirstLightSwitchingCrossingController.
 Available methods:
equals(java.lang.Object) -&gt; boolean
getClass() -&gt; class java.lang.Class
hashCode() -&gt; int
notify() -&gt; void
notifyAll() -&gt; void
toString() -&gt; class java.lang.String
wait() -&gt; void
wait(long) -&gt; void
wait(long, int) -&gt; void</evaluationMessage>
        </expectation>
      </instructionResult>
      <instructionResult>
        <instruction>{id='decisionTable_2_5', instruction='call', instanceName='decisionTable_2', methodName='setSecondLight', args=[red]}</instruction>
        <slimResult></slimResult>
        <expectation>
          <status>error</status>
          <instructionId>decisionTable_2_5</instructionId>
          <type>VoidReturnExpectation</type>
          <evaluationMessage>No Method setSecondLight[1] in class org.trafficlights.test.acceptance.FirstLightSwitchingCrossingController.
 Available methods:
equals(java.lang.Object) -&gt; boolean
getClass() -&gt; class java.lang.Class
hashCode() -&gt; int
notify() -&gt; void
notifyAll() -&gt; void
toString() -&gt; class java.lang.String
wait() -&gt; void
wait(long) -&gt; void
wait(long, int) -&gt; void</evaluationMessage>
        </expectation>
      </instructionResult>
      <instructionResult>
        <instruction>{id='decisionTable_2_7', instruction='call', instanceName='decisionTable_2', methodName='firstLight', args=[]}</instruction>
        <slimResult></slimResult>
        <expectation>
          <status>error</status>
          <instructionId>decisionTable_2_7</instructionId>
          <type>ReturnedValueExpectation</type>
          <evaluationMessage>No Method firstLight[0] in class org.trafficlights.test.acceptance.FirstLightSwitchingCrossingController.
 Available methods:
equals(java.lang.Object) -&gt; boolean
getClass() -&gt; class java.lang.Class
hashCode() -&gt; int
notify() -&gt; void
notifyAll() -&gt; void
toString() -&gt; class java.lang.String
wait() -&gt; void
wait(long) -&gt; void
wait(long, int) -&gt; void</evaluationMessage>
        </expectation>
      </instructionResult>
      <instructionResult>
        <instruction>{id='decisionTable_2_8', instruction='call', instanceName='decisionTable_2', methodName='secondLight', args=[]}</instruction>
        <slimResult></slimResult>
        <expectation>
          <status>error</status>
          <instructionId>decisionTable_2_8</instructionId>
          <type>ReturnedValueExpectation</type>
          <evaluationMessage>No Method secondLight[0] in class org.trafficlights.test.acceptance.FirstLightSwitchingCrossingController.
 Available methods:
equals(java.lang.Object) -&gt; boolean
getClass() -&gt; class java.lang.Class
hashCode() -&gt; int
notify() -&gt; void
notifyAll() -&gt; void
toString() -&gt; class java.lang.String
wait() -&gt; void
wait(long) -&gt; void
wait(long, int) -&gt; void</evaluationMessage>
        </expectation>
      </instructionResult>
    </instructions>
  </result>
  <executionLog>
    <testSystem>slim:fitnesse.slim.SlimService</testSystem>
    <command>/usr/lib/jvm/java-17-oracle/bin/java -cp target/classes:target/test-classes:/home/vitor/DevProjects/books/ATDD/ATTDD_by_example/fitnesse-standalone.jar fitnesse.slim.SlimService 1</command>
    <exitCode>0</exitCode>
    <stdOut>WARNING: A terminally deprecated method in java.lang.System has been called
WARNING: System::setSecurityManager has been called by fitnesse.slim.instructions.SystemExitSecurityManager (file:/home/vitor/DevProjects/books/ATDD/ATTDD_by_example/fitnesse-standalone.jar)
WARNING: Please consider reporting this to the maintainers of fitnesse.slim.instructions.SystemExitSecurityManager
WARNING: System::setSecurityManager will be removed in a future release
</stdOut>
    <stdErr></stdErr>
  </executionLog>
  <finalCounts>
    <right>0</right>
    <wrong>0</wrong>
    <ignores>0</ignores>
    <exceptions>1</exceptions>
  </finalCounts>
  <totalRunTimeInMillis>275</totalRunTimeInMillis>
</testResults>

